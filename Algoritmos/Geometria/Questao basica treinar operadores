#include <bits/stdc++.h>
using namespace std;
struct ponto{
     double x;double y;
   ponto(){}
   ponto(double a,double b){
     x=a;
     y=b;
   }

 ponto operator+(const ponto& c){
     return ponto(x+c.x,y+c.y);
 }
 ponto operator-(const ponto& c){
     return ponto(x-c.x,y-c.y);
 }

 ponto div(const double& c){
     return ponto(x/c,y/c);
 }

 bool operator==(const ponto&c){
     return ((x==c.x && y==c.y));
 }

 bool operator!=(const ponto&c){
     return (!(x==c.x && y==c.y));
 }



double cross(const ponto& b){
     return x*b.y-y*b.x;
}

double dot(const ponto& b){
     return x*b.x+y*b.y; 
}

double distance(const ponto& b){
     return sqrt((x-b.x)*(x-b.x) + (y-b.y)*(y-b.y));
}

};
ponto a,b;
ponto p[8];

int main(){
     for(int i=1;i<=7;i++){
          int x,y;cin>>x>>y;
          p[i]=ponto(x,y);
     }

     bool ok=true;

     if((p[2]-p[1]).dot(p[3]-p[1])<=0){ok=false;}

     if(p[1].distance(p[2])!=p[1].distance(p[3])){ok=false;}

     if((p[2]-p[3]).cross(p[4]-p[3])!=0 || (p[5]-p[3]).cross(p[4]-p[3])!=0){ok=false;}

     if((p[3]+p[2]).div(2)!=(p[5]+p[4]).div(2)){ok=false;}

     if(p[2].distance(p[3])<=p[4].distance(p[5])){ok=false;}

     if((p[2]-p[3]).dot(p[4]-p[6])!=0 || (p[2]-p[3]).dot(p[5]-p[7])!=0){ok=false;}

     if(p[4].distance(p[6])!=p[5].distance(p[7])){ok=false;}

     if(((p[2]-p[3]).cross(p[6]-p[3]))*((p[2]-p[3]).cross(p[1]-p[3]))>0){ok=false;}

     if(((p[2]-p[3]).cross(p[6]-p[3]))==0 && ((p[2]-p[3]).cross(p[1]-p[3]))==0 ){ok=false;}


     if(ok)cout<<'S';
     else cout<<'N';
     
}
     
