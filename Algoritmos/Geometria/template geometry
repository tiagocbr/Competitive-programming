#include<bits/stdc++.h>
using namespace std ;
 
#define ld long double 
 
const double EPS = 1e-6 ; // depende da precisao do problema 
typedef ld T ; // depende da quest 

struct point{
    T x, y;
    int id;
    point(T x=0, T y=0): x(x), y(y){}

    point operator+(const point &o) const{ return {x + o.x, y + o.y}; } // a + b
    point operator-(const point &o) const{ return {x - o.x, y - o.y}; } // a - b
    point operator*(T t) const{ return {x * t, y * t}; } // a * t
    point operator/(T t) const{ return {x / t, y / t}; } // a / t
    T operator*(const point &o) const{ return x * o.x + y * o.y; } // Escalar  (a * b)
    T operator^(const point &o) const{ return x * o.y - y * o.x; } // Vetorial (a ^ b)
    bool operator ==(const point &ot) const { // 2 pontos sao iguais? 
        return (abs(x-ot.x) < EPS && abs(y-ot.y) < EPS) ; 
    }
    bool operator <(const point &ot) const { return (x != ot.x ? x < ot.x : y < ot.y) ; }
};
 
//sort angular 
int ret[2][2] = {{3, 2},{4, 1}}; 
inline int quad(point p) {
    return ret[p.x >= 0][p.y >= 0];
}

bool comp(point a, point b) { // ccw
    int qa = quad(a), qb = quad(b);
    return (qa == qb ? (a ^ b) > 0 : qa < qb);
}
 
ld dist(point a, point b){
    return (a-b)*(a-b);
}
