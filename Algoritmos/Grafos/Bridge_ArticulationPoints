void articulationPointAndBridge(int u) {
  dfs_low[u] = dfs_num[u] = dfsNumberCounter++; // dfs_low[u] <= dfs_num[u]
  for (int j = 0; j < (int)AdjList[u].size(); j++) {
    ii v = AdjList[u][j];
    if (dfs_num[v.first] == UNVISITED) { // a tree edge
      dfs_parent[v.first] = u;
      if (u == dfsRoot) rootChildren++; // special case if u is a root
      articulationPointAndBridge(v.first);
      if (dfs_low[v.first] >= dfs_num[u]) // for articulation point
        articulation_vertex[u] = true; // store this information first
      if (dfs_low[v.first] > dfs_num[u]) // for bridge
        printf(" Edge (%d, %d) is a bridge\n", u, v.first);
      dfs_low[u] = min(dfs_low[u], dfs_low[v.first]); // update dfs_low[u]
    }
  else if (v.first != dfs_parent[u]) // a back edge and not direct cycle
    dfs_low[u] = min(dfs_low[u], dfs_num[v.first]); // update dfs_low[u]
  }    
}
