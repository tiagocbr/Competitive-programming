// Segment Tree
// Build: O(n)
// Update: O(log n)
// Query: O(log n)

#include <bits/stdc++.h>

using namespace std;

#define esq (2 * no)
#define dir (2 * no + 2)
#define meio ((i + j) / 2)

const int maxn = 1e5 + 10;

int vet[maxn];
struct no
{
     int val = 0;
};

no tree[4 * maxn];

no join(no a, no b)
{
     no res;
     res.val = a.val + b.val;
     return res;
}

no null;

void build(int no, int i, int j)
{

     if (i == j)
     {
          tree[no].val = vet[i];
          return;
     }

     build(esq, i, meio);
     build(dir, meio + 1, j);

     tree[no] = join(tree[esq], tree[dir]);
}

void update(int no, int i, int j, int idx, int v)
{

     if (i == j)
     {
          tree[no].val = v;
          return;
     }

     if (i <= idx && idx <= meio)
          update(esq, i, meio, idx, v);
     else
          update(dir, meio + 1, j, idx, v);

     tree[no] = join(tree[esq], tree[dir]);
}

no query(int no, int i, int j, int a, int b)
{

     if (b < i || a > j)
          return null;

     if (i >= a && j <= b)
          return tree[no];

     return join(query(esq, i, meio, a, b), query(dir, meio + 1, j, a, b));
}

int main()
{
     int n;
     cin >> n;

     null.val = 0;
     for (int i = 0; i < n; i++)
     {
          cin >> vet[i];
     }

     build(1, 0, n - 1);

     cout << query(1, 0, n - 1, 5, n - 2).val;
}
